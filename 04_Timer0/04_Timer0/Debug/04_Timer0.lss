
04_Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000000fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004d4  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000046b  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e8  00000000  00000000  00000ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002bc  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__vector_11>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a1 36       	cpi	r26, 0x61	; 97
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	1a d0       	rcall	.+52     	; 0x74 <main>
  40:	22 c0       	rjmp	.+68     	; 0x86 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_11>:

volatile uint8_t count = 0;


ISR(TIM0_OVF_vect)
{
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	8f 93       	push	r24
	count++;
  50:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  54:	8f 5f       	subi	r24, 0xFF	; 255
  56:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
	if(count == 4)
  5a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  5e:	84 30       	cpi	r24, 0x04	; 4
  60:	19 f4       	brne	.+6      	; 0x68 <__vector_11+0x24>
	{
		LED_TOGGLE;
  62:	c8 9a       	sbi	0x19, 0	; 25
		count = 0;
  64:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
}
  68:	8f 91       	pop	r24
  6a:	0f 90       	pop	r0
  6c:	0f be       	out	0x3f, r0	; 63
  6e:	0f 90       	pop	r0
  70:	1f 90       	pop	r1
  72:	18 95       	reti

00000074 <main>:
 *
 */
int main(void)
{
	// set PA0 output pin
	DDRA |= (1<<DDA0);
  74:	d0 9a       	sbi	0x1a, 0	; 26
	
	  TCCR0B |= _BV(CS02)|_BV(CS00); // set prescaler to 1024 (CLK=1000000Hz/1024/256= 3.8Hz, 0.25s)
  76:	83 b7       	in	r24, 0x33	; 51
  78:	85 60       	ori	r24, 0x05	; 5
  7a:	83 bf       	out	0x33, r24	; 51
	  TIMSK0 |= _BV(TOIE0); // enable Timer Overflow interrupt
  7c:	89 b7       	in	r24, 0x39	; 57
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	89 bf       	out	0x39, r24	; 57
	  sei(); // enable global interrupts
  82:	78 94       	sei
	
	while (1) 
    {
		// Do nothing
    }
  84:	ff cf       	rjmp	.-2      	; 0x84 <main+0x10>

00000086 <_exit>:
  86:	f8 94       	cli

00000088 <__stop_program>:
  88:	ff cf       	rjmp	.-2      	; 0x88 <__stop_program>
