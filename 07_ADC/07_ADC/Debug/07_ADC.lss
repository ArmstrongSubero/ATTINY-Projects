
07_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000060  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004c6  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000045c  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e9  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ac  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	09 d0       	rcall	.+18     	; 0x42 <main>
  30:	15 c0       	rjmp	.+42     	; 0x5c <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <initADC>:
   below example set prescaler to 16 for mcu running at 1MHz


  */

   ADMUX =
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	87 b9       	out	0x07, r24	; 7
            (0 << MUX3)  |     // use ADC1 for input (PA1), MUX bit 3
            (0 << MUX2)  |     // use ADC1 for input (PA1), MUX bit 2
            (0 << MUX1)  |     // use ADC1 for input (PA1), MUX bit 1
            (1 << MUX0);       // use ADC1 for input (PA1), MUX bit 0

  ADCSRA = 
  38:	84 e8       	ldi	r24, 0x84	; 132
  3a:	86 b9       	out	0x06, r24	; 6
            (1 << ADEN)  |     // Enable ADC 
            (1 << ADPS2) |     // set prescaler to 16, bit 2 
            (0 << ADPS1) |     // set prescaler to 16, bit 1 
            (0 << ADPS0);      // set prescaler to 16, bit 0 
			
  ADCSRB = 
  3c:	80 e1       	ldi	r24, 0x10	; 16
  3e:	83 b9       	out	0x03, r24	; 3
  40:	08 95       	ret

00000042 <main>:
 *
 */
int main(void)
{
	// set PA0 output pin
	DDRA = 0b0000001;
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	8a bb       	out	0x1a, r24	; 26
	
	initADC();
  46:	f6 df       	rcall	.-20     	; 0x34 <initADC>
	
	while (1) 
    {
		ADCSRA |= (1 << ADSC);         // start ADC measurement
  48:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1 << ADSC) ); // wait till conversion complete
  4a:	36 99       	sbic	0x06, 6	; 6
  4c:	fe cf       	rjmp	.-4      	; 0x4a <main+0x8>

		if (ADCH > 128)
  4e:	85 b1       	in	r24, 0x05	; 5
  50:	81 38       	cpi	r24, 0x81	; 129
  52:	10 f0       	brcs	.+4      	; 0x58 <main+0x16>
		{
			LED_ON;
  54:	d8 9a       	sbi	0x1b, 0	; 27
  56:	f8 cf       	rjmp	.-16     	; 0x48 <main+0x6>
		} 
		else 
		{
			LED_OFF;
  58:	d8 98       	cbi	0x1b, 0	; 27
  5a:	f6 cf       	rjmp	.-20     	; 0x48 <main+0x6>

0000005c <_exit>:
  5c:	f8 94       	cli

0000005e <__stop_program>:
  5e:	ff cf       	rjmp	.-2      	; 0x5e <__stop_program>
