
05_Tone_Generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d9  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000514  00000000  00000000  00000729  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000261  00000000  00000000  00000c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000041  00000000  00000000  000011f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	0b d0       	rcall	.+22     	; 0x46 <main>
  30:	18 c0       	rjmp	.+48     	; 0x62 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <play_alarm>:
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <util/delay.h>

void play_alarm()
{
  34:	8a e0       	ldi	r24, 0x0A	; 10
	for (uint8_t i=0; i<10; i++)
	{
		//play x notes inside song array
		BUZZER_TOGGLE;
  36:	b0 9a       	sbi	0x16, 0	; 22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  38:	96 ea       	ldi	r25, 0xA6	; 166
  3a:	9a 95       	dec	r25
  3c:	f1 f7       	brne	.-4      	; 0x3a <play_alarm+0x6>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <__SREG__+0x1>
  40:	81 50       	subi	r24, 0x01	; 1
#include <avr/pgmspace.h>
#include <util/delay.h>

void play_alarm()
{
	for (uint8_t i=0; i<10; i++)
  42:	c9 f7       	brne	.-14     	; 0x36 <play_alarm+0x2>
	{
		//play x notes inside song array
		BUZZER_TOGGLE;
		_delay_us(500);
	}
}
  44:	08 95       	ret

00000046 <main>:
 * @brief Main program entry point
 *
 */
int main(void)
{	
	DDRB  = 0b00000001; // set BUZZER pin as OUTPUT
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000000; // set all pins to LOW
  4a:	18 ba       	out	0x18, r1	; 24

	
	while (1) 
    {
		// play beep
		play_alarm();
  4c:	f3 df       	rcall	.-26     	; 0x34 <play_alarm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	2f e3       	ldi	r18, 0x3F	; 63
  50:	8d e0       	ldi	r24, 0x0D	; 13
  52:	93 e0       	ldi	r25, 0x03	; 3
  54:	21 50       	subi	r18, 0x01	; 1
  56:	80 40       	sbci	r24, 0x00	; 0
  58:	90 40       	sbci	r25, 0x00	; 0
  5a:	e1 f7       	brne	.-8      	; 0x54 <main+0xe>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <main+0x18>
  5e:	00 00       	nop
  60:	f5 cf       	rjmp	.-22     	; 0x4c <main+0x6>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>
